# -*- coding: utf-8 -*-
"""LOKALIN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kudYZhbIDdbf2VOiU9YfuKpjKnE80SZD
"""

import pandas as pd
import tensorflow as tf
import numpy as np
from sklearn.neighbors import NearestNeighbors
import numpy as np
import joblib  # Untuk menyimpan model

!pip install tensorflow

pip install geocoder

!pip install streamlit geocoder pandas tensorflow

import streamlit as st
import pandas as pd
import numpy as np
import tensorflow as tf
import geocoder
import matplotlib.pyplot as plt
import seaborn as sns

# --- 1. Load Data UMKM ---
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/Zeeshuwu/LOKALIN/main/UMKM%20Cilacap%20Benar.csv"
    df = pd.read_csv(url)
    return df

df = load_data()

# --- 2. Load TFLite Model ---
@st.cache_resource
def load_model():
    model_path = "knn_umkm_model_fix.tflite"  # Harus diupload secara lokal karena TFLite tidak bisa di-load langsung dari URL
    interpreter = tf.lite.Interpreter(model_path=model_path)
    interpreter.allocate_tensors()
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    return interpreter, input_details, output_details

interpreter, input_details, output_details = load_model()

# --- Sidebar Navigasi ---
menu = st.sidebar.radio("Pilih Analisis:", [
    "🔍 UMKM Terdekat",
    "📊 Distribusi & Lapangan Kerja",
    "📈 Analisis Data UMKM"
])

# --- Fungsi 1: Deteksi Lokasi dan UMKM Terdekat ---
if menu == "🔍 UMKM Terdekat":
    st.header("🔍 Cari UMKM Terdekat dari Lokasi Kamu")
    g = geocoder.ip('me')

    if g.latlng:
        user_lat, user_lon = g.latlng
        st.success(f"Lokasi Kamu: Latitude {user_lat:.4f}, Longitude {user_lon:.4f}")

        user_location = np.array([[user_lon, user_lat]], dtype=np.float32)  # Ingat: [LONG, LAT]
        interpreter.set_tensor(input_details[0]['index'], user_location)
        interpreter.invoke()

        indices = interpreter.get_tensor(output_details[0]['index'])
        st.subheader("🏠 5 UMKM Terdekat:")

        for idx in indices[:, 0]:
            umkm_info = df.iloc[idx]
            umkm_name = umkm_info['UMKM']
            usaha = umkm_info['USAHA']
            lat = umkm_info['LAT']
            lon = umkm_info['LONG']
            maps_url = f"https://www.google.com/maps/search/?api=1&query={lat},{lon}"

            st.markdown(f"**{umkm_name}** - {usaha}")
            st.write(f"Lokasi: ({lat}, {lon})")
            st.markdown(f"[📍 Lihat di Google Maps]({maps_url})")
            st.divider()
    else:
        st.error("Gagal mendeteksi lokasi. Coba cek koneksi internet kamu.")

# --- Fungsi 2: Distribusi & Lapangan Kerja ---
elif menu == "📊 Distribusi & Lapangan Kerja":
    st.header("📊 Distribusi UMKM dan Penyerapan Tenaga Kerja")

    if 'USAHA' in df.columns and 'PEKERJA' in df.columns:
        usaha_counts = df['USAHA'].value_counts()
        pekerja_total = df.groupby('USAHA')['PEKERJA'].sum().sort_values(ascending=False)

        st.subheader("Jumlah UMKM per Jenis Usaha")
        st.bar_chart(usaha_counts)

        st.subheader("Total Pekerja per Jenis Usaha")
        fig, ax = plt.subplots()
        sns.barplot(x=pekerja_total.values, y=pekerja_total.index, ax=ax)
        ax.set_xlabel("Jumlah Pekerja")
        ax.set_ylabel("Jenis Usaha")
        st.pyplot(fig)
    else:
        st.warning("Kolom 'USAHA' atau 'PEKERJA' tidak ditemukan di data.")

# --- Fungsi 3: Analisis Data UMKM ---
elif menu == "📈 Analisis Data UMKM":
    st.header("📈 Analisis Data UMKM Cilacap")

    st.subheader("Statistik Deskriptif")
    st.write(df.describe(include='all'))

    st.subheader("Peta Sebaran UMKM")
    if 'LAT' in df.columns and 'LONG' in df.columns:
        st.map(df[['LAT', 'LONG']].dropna())
    else:
        st.warning("Data tidak memuat informasi lokasi.")

    st.subheader("Filter Berdasarkan Jenis Usaha")
    usaha_list = df['USAHA'].dropna().unique().tolist()
    selected_usaha = st.multiselect("Pilih Jenis Usaha:", usaha_list)

    if selected_usaha:
        filtered_df = df[df['USAHA'].isin(selected_usaha)]
        st.write(f"Menampilkan {len(filtered_df)} UMKM dari jenis usaha yang dipilih.")
        st.dataframe(filtered_df)
    else:
        st.info("Silakan pilih jenis usaha untuk melihat datanya.")